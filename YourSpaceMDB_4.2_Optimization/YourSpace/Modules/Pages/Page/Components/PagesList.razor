@inject YourSpace.Services.ISPagesCasher SPagesCasher

@if (_renderList != null)
{
    foreach (var render in _renderList)
    {
        @render
    }
}
else
{
    <Loading></Loading>
}




@code {


    [Parameter] public EventCallback onPageDeleted { get; set; }
    [Parameter] public bool ShowEditPage { get; set; } = false;
    [Parameter] public bool ShowModerationPage { get; set; } = false;
    [Parameter] public List<MPageInfo> Pages { get; set; }
    [Parameter] public string Class { get; set; }

    public Type PageCardComponentBase { get; set; } = typeof(PagePresentationCardTemplate);

    [Inject] protected ISPagesUrl SUrl { get; set; }
    [Inject] protected ISThingCounter sMarks { get; set; }

    private List<RenderFragment> _renderList;

    public async Task<int> GetSubscribers(MPageCardBlock page)
    {
        var notes = await sMarks.GetCounterAmountNotes(page.PageId, MCounterType.Subscribe());
        return notes.Count;
    }

    public async Task<int> GetLikes(MPageCardBlock page)
    {
        var notes = await sMarks.GetCounterAmountNotesByPage(page.PageId, MCounterType.Like());
        return notes.Count;
    }



    RenderFragment RenderBlock(MPageCardBlock page, int likes, int subs, string url) => builder =>
    {
        builder.OpenComponent(0, PageCardComponentBase);
        builder.AddAttribute(1, "Model", page);
        builder.AddAttribute(2, "Class", Class);
        builder.AddAttribute(3, "onDeletePage", EventCallback.Factory.Create<string>(this, DeletePageView));
        builder.AddAttribute(4, "ShowEditPage", ShowEditPage);
        builder.AddAttribute(5, "ShowModerationPage", ShowModerationPage);

        builder.AddAttribute(6, "Likes", likes);
        builder.AddAttribute(7, "Subscribers", subs);
        builder.AddAttribute(8, "Url", url);
        builder.CloseComponent();
    };



    async void DeletePageView(string pageId)
    {
        MPageInfo page = Pages.FirstOrDefault(p => p.Id == pageId);
        if (page != null)
        {
            Pages.Remove(page);
            await onPageDeleted.InvokeAsync(this);
            await UpdateRenderList();
            StateHasChanged();
        }

    }


    protected override async Task OnInitializedAsync()
    {
        await UpdateRenderList();
    }

    protected async Task UpdateRenderList()
    {
        _renderList = new List<RenderFragment>();

        foreach (var page in Pages)
        {

            MPage pageModel = await SPagesCasher.TryGetPage(page.Id);

            if (pageModel != null && pageModel.DisplayCard != null)
            {
                int likes = await GetLikes(pageModel.DisplayCard);
                int subs = await GetSubscribers(pageModel.DisplayCard);
                string url = await SUrl.GetPageUrl(pageModel.Id);

                var renderFragment = RenderBlock(pageModel.DisplayCard, likes, subs, url);
                _renderList.Add(renderFragment);
            }
            else
            {
                throw new Exception("Page cant be loaded");
            }

        }
    }

}
