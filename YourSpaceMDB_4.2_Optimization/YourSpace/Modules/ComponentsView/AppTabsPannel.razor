
<AuthorizeView>
    <Authorized>
        <div class="d-flex flex-column justify-content-center fixed-bottom app-tabs-pannel">

            <div class="d-flex flex-row flex-fill justify-content-center app-tabs-second app-tabs-second-hide">
                <MusicPlayer Class="invisible app-pannel-music"></MusicPlayer>
               
            </div>

            <div class="d-flex flex-row flex-fill justify-content-center app-tabs-main">
                <a class="icon icon-book-open mx-1 cursor-pointer" @onclick="Book"></a>
                @*<div class="icon icon-fast-forward mx-1 cursor-pointer" @onclick="Player"></div>*@
                <div class="icon icon-home mx-1 cursor-pointer" @onclick="Home"></div>
                <div id="visible-state-second-pannel-btn" class="icon icon-chevrons-up cursor-pointer"></div>
            </div>
            
        </div>
    </Authorized>
</AuthorizeView>


@code 
{

    [Inject] public IJSRuntime JSRuntime { get; set; }
    [Inject] public NavigationManager NavigationManager { get; set; }
    [Inject] public ISMusic SMusic { get; set; }
    [CascadingParameter] public Task<AuthenticationState> Auth { get; set; }


    protected string _name = "";



    void Book()
    {
        NavigationManager.NavigateTo("/");
    }

    void Player()
    {
        NavigationManager.NavigateTo("/");
    }

    void Home()
    {
        var uri = "/account/" + _name;
        NavigationManager.NavigateTo(uri);
    }

    protected override async Task OnInitializedAsync()
    {
        var user = (await Auth).User;
        _name = user.Identity.Name;
    }


    protected override void OnInitialized()
    {
    }



    protected override async void OnAfterRender(bool firstRender)
    {

        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("InitAppTabsPannel");
        }

    }

}